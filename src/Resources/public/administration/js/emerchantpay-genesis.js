(function(){var t={660:function(){},282:function(t,e,n){var a=n(660);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[t.id,a,""]]),a.locals&&(t.exports=a.locals),n(346).Z("dc98b06c",a,!0,{})},346:function(t,e,n){"use strict";function a(t,e){for(var n=[],a={},s=0;s<e.length;s++){var i=e[s],r=i[0],c={id:t+":"+s,css:i[1],media:i[2],sourceMap:i[3]};a[r]?a[r].parts.push(c):n.push(a[r]={id:r,parts:[c]})}return n}n.d(e,{Z:function(){return m}});var s="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!s)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},r=s&&(document.head||document.getElementsByTagName("head")[0]),c=null,o=0,d=!1,p=function(){},l=null,u="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(t,e,n,s){d=n,l=s||{};var r=a(t,e);return y(r),function(e){for(var n=[],s=0;s<r.length;s++){var c=i[r[s].id];c.refs--,n.push(c)}e?y(r=a(t,e)):r=[];for(var s=0;s<n.length;s++){var c=n[s];if(0===c.refs){for(var o=0;o<c.parts.length;o++)c.parts[o]();delete i[c.id]}}}}function y(t){for(var e=0;e<t.length;e++){var n=t[e],a=i[n.id];if(a){a.refs++;for(var s=0;s<a.parts.length;s++)a.parts[s](n.parts[s]);for(;s<n.parts.length;s++)a.parts.push(f(n.parts[s]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{for(var r=[],s=0;s<n.parts.length;s++)r.push(f(n.parts[s]));i[n.id]={id:n.id,refs:1,parts:r}}}}function g(){var t=document.createElement("style");return t.type="text/css",r.appendChild(t),t}function f(t){var e,n,a=document.querySelector("style["+u+'~="'+t.id+'"]');if(a){if(d)return p;a.parentNode.removeChild(a)}if(h){var s=o++;e=w.bind(null,a=c||(c=g()),s,!1),n=w.bind(null,a,s,!0)}else e=_.bind(null,a=g()),n=function(){a.parentNode.removeChild(a)};return e(t),function(a){a?(a.css!==t.css||a.media!==t.media||a.sourceMap!==t.sourceMap)&&e(t=a):n()}}var v=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function w(t,e,n,a){var s=n?"":a.css;if(t.styleSheet)t.styleSheet.cssText=v(e,s);else{var i=document.createTextNode(s),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(i,r[e]):t.appendChild(i)}}function _(t,e){var n=e.css,a=e.media,s=e.sourceMap;if(a&&t.setAttribute("media",a),l.ssrId&&t.setAttribute(u,e.id),s&&(n+="\n/*# sourceURL="+s.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},e={};function n(a){var s=e[a];if(void 0!==s)return s.exports;var i=e[a]={id:a,exports:{}};return t[a](i,i.exports,n),i.exports}n.d=function(t,e){for(var a in e)n.o(e,a)&&!n.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="bundles/emerchantpaygenesis/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/emerchantpaygenesis/"),function(){"use strict";let t=Shopware.Classes.ApiService;var e=class extends t{constructor(t,e,n="emerchantpay-v1"){super(t,e,n)}getPaymentReferenceDetails(e,n){let a=`${this.getApiBasePath()}/genesis/transaction/payment-reference-details`;return this.httpClient.post(a,{orderId:e,uniqueId:n},this.getDefaultOptions()).then(e=>t.handleResponse(e))}doCapture(e,n){let a=`${this.getApiBasePath("","_action")}/genesis/transaction/capture`;return this.httpClient.post(a,{orderId:e,uniqueId:n},this.getDefaultOptions()).then(e=>t.handleResponse(e))}doRefund(e,n){let a=`${this.getApiBasePath("","_action")}/genesis/transaction/refund`;return this.httpClient.post(a,{orderId:e,uniqueId:n},this.getDefaultOptions()).then(e=>t.handleResponse(e))}doVoid(e,n){let a=`${this.getApiBasePath("","_action")}/genesis/transaction/void`;return this.httpClient.post(a,{orderId:e,uniqueId:n},this.getDefaultOptions()).then(e=>t.handleResponse(e))}getDefaultOptions(){return{headers:this.getBasicHeaders(),version:Shopware.Context.api.apiVersion}}};let{Application:a}=Shopware,s=a.getContainer("init");a.addServiceProvider("EmerchantpayGenesisTransaction",t=>new e(s.httpClient,t.loginService));let i=Shopware.Classes.ApiService;var r=class extends i{constructor(t,e,n="emerchantpay-v1"){super(t,e,n)}convertAmountToExponent(t,e){let n=`${this.getApiBasePath()}/genesis/utils/convert-amount-exponent/${t}/${e}`;return this.httpClient.get(n,this.getDefaultOptions()).then(t=>i.handleResponse(t))}getDefaultOptions(){return{headers:this.getBasicHeaders(),version:Shopware.Context.api.apiVersion}}};let{Application:c}=Shopware,o=c.getContainer("init");c.addServiceProvider("EmerchantpayGenesisUtils",t=>new r(o.httpClient,t.loginService));let d=Shopware.Data.Criteria;Shopware.Component.override("sw-order-detail",{template:"{% block sw_order_detail_content_tabs_general %}\n\n    {% parent %}\n\n    <sw-tabs-item v-if=\"isEmerchantpayPayment\"\n                  :route=\"{ name: 'sw.order.emerchantpay-genesis-transaction-details', params: { id: $route.params.id } }\"\n                  :title=\"$tc('emerchantpay-genesis-transactions.tab-title')\">\n        {{ $tc('emerchantpay-genesis-transactions.tab-title') }}\n    </sw-tabs-item>\n\n{% endblock %}\n",data(){return{isEmerchantpayPayment:!1}},watch:{orderId:{deep:!0,handler(){if(!this.orderId)return;let t=this.repositoryFactory.create("order"),e=new d(1,1);e.addAssociation("transactions"),e.getAssociation("transactions").addSorting(d.sort("createdAt")),t.get(this.orderId,Shopware.Context.api,e).then(t=>{let e=t.transactions.length,n=e-1;if(e<=0||!t.transactions[n].paymentMethodId)return;let a=t.transactions[n].paymentMethodId;null!=a&&this.setIsEmerchantpayPayment(a)})},immediate:!0}},methods:{setIsEmerchantpayPayment(t){this.repositoryFactory.create("payment_method").get(t,Shopware.Context.api).then(t=>{this.isEmerchantpayPayment="handler_emerchantpay_checkoutpayment"===t.formattedHandlerIdentifier})}}});let p=Shopware.Data.Criteria,{Component:l,Mixin:u,Filter:h}=Shopware;Shopware.Component.register("sw-order-emerchantpay-genesis-transaction-details",{inject:["repositoryFactory","EmerchantpayGenesisUtils"],mixins:[u.getByName("notification")],template:'{% block emerchantpay_genesis_order_card %}\n    <div>\n        {% block emerchantpay_genesis_payment_card %}\n            <sw-card :title="$tc(\'emerchantpay-genesis-transactions.payment-card.title\')">\n                <sw-card-section>\n                    <sw-container columns="1fr">\n                        <h3>{{ $tc(\'emerchantpay-genesis-transactions.payment-card.title\') }}</h3>\n                        <sw-description-list>\n                            <dt>{{ $tc(\'emerchantpay-genesis-transactions.payment-card.transaction_id\') }}</dt>\n                            <dd>{{ paymentData.transaction_id }}</dd>\n\n                            <dt>{{ $tc(\'emerchantpay-genesis-transactions.payment-card.unique_id\') }}</dt>\n                            <dd>{{ paymentData.unique_id }}</dd>\n\n                            <dt>{{ $tc(\'emerchantpay-genesis-transactions.payment-card.amount\') }}</dt>\n                            <dd>{{ paymentData.amount }}</dd>\n\n                            <dt>{{ $tc(\'emerchantpay-genesis-transactions.payment-card.currency\') }}</dt>\n                            <dd>{{ paymentData.currency }}</dd>\n\n                            <dt>{{ $tc(\'emerchantpay-genesis-transactions.payment-card.mode\') }}</dt>\n                            <dd>{{ paymentData.mode }}</dd>\n\n                            <dt>{{ $tc(\'emerchantpay-genesis-transactions.payment-card.created_at\') }}</dt>\n                            <dd>{{ paymentData.created_at }}</dd>\n                        </sw-description-list>\n                    </sw-container>\n                </sw-card-section>\n\n                <sw-loader v-if="isPaymentLoading"></sw-loader>\n            </sw-card>\n        {% endblock %}\n\n        {% block emerchantpay_genesis_transaction_card %}\n            <emerchantpay-genesis-transaction-section v-if="!isPaymentLoading"\n                                                      :paymentData="paymentData"\n                                                      @reload-event="reloadData">\n            </emerchantpay-genesis-transaction-section>\n        {% endblock %}\n\n        {% block emerchantpay_genesis_history_card %}\n            <sw-card :title="$tc(\'emerchantpay-genesis-transactions.payment-history.title\')">\n                <template #grid>\n                    <sw-data-grid :dataSource="transactionHistory"\n                                  :columns="transactionColumns"\n                                  :showActions="false"\n                                  :showSelection="false">\n                    </sw-data-grid>\n                </template>\n\n                <sw-loader v-if="isHistoryLoading"></sw-loader>\n            </sw-card>\n        {% endblock %}\n    </div>\n{% endblock %}\n',data(){return{paymentData:{},transactions:{},transactionHistory:[],amount:null,isPaymentLoading:!0,isHistoryLoading:!0}},computed:{transactionRepository(){return this.repositoryFactory.create("emerchantpay_genesis_payment_entity")},transactionCriteria(){return new p(1,100).addFilter(p.equals("order_id",this.$route.params.id)).addSorting(p.sort("created_at","ASC"))},transactionColumns(){return[{property:"unique_id",label:this.$tc("emerchantpay-genesis-transactions.payment-history.unique_id"),rawData:!0},{property:"reference_id",label:this.$tc("emerchantpay-genesis-transactions.payment-history.reference_id"),rawData:!0},{property:"status",label:this.$tc("emerchantpay-genesis-transactions.payment-history.status"),rawData:!0},{property:"transaction_type",label:this.$tc("emerchantpay-genesis-transactions.payment-history.transaction_type"),rawData:!0},{property:"mode",label:this.$tc("emerchantpay-genesis-transactions.payment-history.mode"),rawData:!0},{property:"amount",label:this.$tc("emerchantpay-genesis-transactions.payment-history.amount"),rawData:!0},{property:"currency",label:this.$tc("emerchantpay-genesis-transactions.payment-history.currency"),rawData:!0},{property:"created_at",label:this.$tc("emerchantpay-genesis-transactions.payment-history.updated_at"),rawData:!0}]},dateFilter(){return h.getByName("date")}},created(){this.buildData()},metaInfo(){return{title:this.$tc("emerchantpay-genesis-transactions.tab-title")}},methods:{buildData:function(){this.resetData(),this.getPaymentData().then(t=>{if(t.length<=0){this.showErrorMessage(this.$tc("emerchantpay-genesis-transactions.notifications.errors.payment-not-found"));return}this.paymentData={transaction_id:t[0].transaction_id,unique_id:t[0].unique_id,amount:t[0].amount,currency:t[0].currency,mode:t[0].mode,created_at:this.formatDate(t[0].created_at)},t.forEach(t=>{this.transactionHistory.push({unique_id:t.unique_id,reference_id:t.reference_id,status:t.status,transaction_type:t.transaction_type,mode:t.mode,amount:t.amount,currency:t.currency,created_at:this.formatDate(t.created_at),updated_at:this.formatDate(t.updated_at)})}),this.convertAmountToExponent(this.paymentData.amount,this.paymentData.currency).then(t=>{this.paymentData.amount=t.amount,this.transactionHistory.forEach(e=>{e.amount=t.amount}),this.isPaymentLoading=!1,this.isHistoryLoading=!1})})},showSuccessMessage:function(t){this.createNotificationSuccess({title:this.$tc("emerchantpay-genesis-transactions.notifications.success-title"),message:t})},showErrorMessage:function(t){this.createNotificationError({title:this.$tc("emerchantpay-genesis-transactions.notifications.error-title"),message:t})},formatDate(t){return this.dateFilter(t,{hour:"2-digit",minute:"2-digit"})},convertAmountToExponent:function(t,e){return this.EmerchantpayGenesisUtils.convertAmountToExponent(t,e).then(t=>t)},getPaymentData:function(){return this.transactionRepository.search(this.transactionCriteria,Shopware.Context.api).then(t=>t)},resetData:function(){this.paymentData={},this.transactions={},this.transactionHistory=[],this.amount=null,this.isHistoryLoading=!0},reloadData(){this.buildData()}}}),Shopware.Component.register("emerchantpay-genesis-transaction-section",{inject:["EmerchantpayGenesisTransaction"],template:"<sw-card :title=\"$tc('emerchantpay-genesis-transactions.payment-transaction.title')\">\n\n    {% block emerchantpay_genesis_transaction_actions_container %}\n        <emerchantpay-genesis-transaction-actions :v-if=\"actionTransaction\"\n                                                  :isVoidAvailable=\"canVoid\"\n                                                  :isCaptureAvailable=\"canCapture\"\n                                                  :isRefundAvailable=\"canRefund\"\n                                                  :actionTransaction=\"actionTransaction\"\n                                                  @reference-action-event=\"executedReferenceAction\">\n        </emerchantpay-genesis-transaction-actions>\n    {% endblock %}\n\n    {% block emerchantpay_genesis_transaction_states_card %}\n        <sw-card-section divider=\"top\" v-if=\"initialTransaction\">\n            <sw-container columns=\"1fr\" gap=\"0px 30px\">\n\n                {% block emerchantpay_genesis_transaction_initial_container %}\n                    <h3>\n                        {{ $tc('emerchantpay-genesis-transactions.payment-transaction.initial-title') }} - {{ initialTransaction.transaction_type }}\n                    </h3>\n                    <sw-description-list>\n                        <dt>{{ $tc('emerchantpay-genesis-transactions.payment-history.unique_id') }}</dt>\n                        <dd>{{ initialTransaction.unique_id }}</dd>\n\n                        <dt>{{ $tc('emerchantpay-genesis-transactions.payment-history.reference_id') }}</dt>\n                        <dd>{{ initialTransaction.reference_id }}</dd>\n\n                        <dt>{{ $tc('emerchantpay-genesis-transactions.payment-transaction.amount') }}</dt>\n                        <dd>{{ initialTransaction.amount }}</dd>\n\n                        <dt>{{ $tc('emerchantpay-genesis-transactions.payment-transaction.status') }}</dt>\n                        <dd>{{ initialTransaction.status }}</dd>\n                    </sw-description-list>\n                {% endblock %}\n\n                {% block emerchantpay_genesis_transaction_capture_container %}\n                    <div v-if=\"captureTransaction\">\n                        <h3>\n                            {{ $tc('emerchantpay-genesis-transactions.payment-transaction.capture-title') }} - {{ captureTransaction.transaction_type }}\n                        </h3>\n                        <sw-description-list>\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-history.unique_id') }}</dt>\n                            <dd>{{ captureTransaction.unique_id }}</dd>\n\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-history.reference_id') }}</dt>\n                            <dd>{{ captureTransaction.reference_id }}</dd>\n\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-transaction.amount') }}</dt>\n                            <dd>{{ captureTransaction.amount }} {{ captureTransaction.currency }}</dd>\n\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-transaction.status') }}</dt>\n                            <dd>{{ captureTransaction.status }}</dd>\n                        </sw-description-list>\n                    </div>\n                {% endblock %}\n\n                {% block emerchantpay_genesis_transaction_refund_container %}\n                    <div v-if=\"refundTransaction\">\n                        <h3>\n                            {{ $tc('emerchantpay-genesis-transactions.payment-transaction.refund-title') }} - {{ refundTransaction.transaction_type }}\n                        </h3>\n                        <sw-description-list>\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-history.unique_id') }}</dt>\n                            <dd>{{ refundTransaction.unique_id }}</dd>\n\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-history.reference_id') }}</dt>\n                            <dd>{{ refundTransaction.reference_id }}</dd>\n\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-transaction.amount') }}</dt>\n                            <dd>{{ refundTransaction.amount }} {{ refundTransaction.currency }}</dd>\n\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-transaction.status') }}</dt>\n                            <dd>{{ refundTransaction.status }}</dd>\n                        </sw-description-list>\n                    </div>\n                {% endblock %}\n\n                {% block emerchantpay_genesis_transaction_void_container %}\n                    <div v-if=\"voidTransaction\">\n                        <h3>\n                            {{ $tc('emerchantpay-genesis-transactions.payment-transaction.void-title') }} - {{ voidTransaction.transaction_type }}\n                        </h3>\n                        <sw-description-list>\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-history.unique_id') }}</dt>\n                            <dd>{{ voidTransaction.unique_id }}</dd>\n\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-history.reference_id') }}</dt>\n                            <dd>{{ voidTransaction.reference_id }}</dd>\n\n                            <dt>{{ $tc('emerchantpay-genesis-transactions.payment-transaction.status') }}</dt>\n                            <dd>{{ voidTransaction.status }}</dd>\n                        </sw-description-list>\n                    </div>\n                {% endblock %}\n            </sw-container>\n        </sw-card-section>\n    {% endblock %}\n\n    {% block emerchantpay_genesis_missing_initial_transaction %}\n    <sw-card-section v-if=\"!initialTransaction\">\n        <sw-container>\n            <h2>\n                <sw-icon name=\"default-communication-speech-bubble\" color=\"#1abc9c\"></sw-icon>\n                {{ $tc('emerchantpay-genesis-transactions.payment-transaction.missing-approved') }}\n            </h2>\n            <p>{{ $tc('emerchantpay-genesis-transactions.payment-transaction.missing-approved-description') }}</p>\n        </sw-container>\n    </sw-card-section>\n    {% endblock %}\n\n    <sw-loader v-if=\"isTransactionLoading\"></sw-loader>\n</sw-card>\n",props:{paymentData:Object},data(){return{canVoid:!1,canCapture:!1,canRefund:!1,isTransactionLoading:!0,actionTransaction:null,initialTransaction:null,captureTransaction:null,refundTransaction:null,voidTransaction:null}},created(){this.buildData()},methods:{buildData:function(){this.resetData(),this.EmerchantpayGenesisTransaction.getPaymentReferenceDetails(this.$route.params.id,this.paymentData.unique_id).then(t=>{this.canVoid=t.canVoid,this.canCapture=t.canCapture,this.canRefund=t.canRefund,this.actionTransaction=t.actionTransaction,this.initialTransaction=0===t.initialTransaction.length?null:t.initialTransaction,this.actionUniqueId=t.actionUniqueId,this.refundTransaction=0===t.refundTransaction.length?null:t.refundTransaction,this.captureTransaction=0===t.captureTransaction.length?null:t.captureTransaction,this.voidTransaction=0===t.voidTransaction.length?null:t.voidTransaction,this.isTransactionLoading=!1})},resetData:function(){this.canVoid=!1,this.canCapture=!1,this.canRefund=!1,this.isTransactionLoading=!0,this.actionTransaction=null,this.initialTransaction=null,this.captureTransaction=null,this.refundTransaction=null,this.voidTransaction=null},executedReferenceAction:function(){this.buildData(),this.$emit("reload-event")}}});let m="pending_async",y="approved",g="declined";Shopware.Component.register("emerchantpay-genesis-transaction-action-capture",{template:'<sw-modal variant="small"\n          :title="$tc(\'emerchantpay-genesis-transactions.transaction-actions.capture\')"\n          @modal-close="closeModal">\n\n    <p>{{ modalMessage }}</p>\n\n    <template #modal-footer>\n\n        <sw-button @click="closeModal">\n            {{ $tc(\'emerchantpay-genesis-transactions.transaction-actions.cancel\') }}\n        </sw-button>\n\n        <sw-button variant="primary"\n                   @click="capturePayment">\n            {{ $tc(\'emerchantpay-genesis-transactions.transaction-actions.capture\') }}\n        </sw-button>\n\n    </template>\n\n    <sw-loader v-if="isLoading" size="43px">\n    </sw-loader>\n</sw-modal>\n',inject:["EmerchantpayGenesisTransaction"],mixins:["notification"],props:{actionTransaction:{type:Object,required:!0}},computed:{modalMessage:function(){let t=this.$tc("emerchantpay-genesis-transactions.transaction-actions.descriptions.capture");return(t=(t=t.replace("%amount%",this.actionTransaction.amount)).replace("%currency%",this.actionTransaction.currency)).replace("%transaction_type%",this.actionTransaction.transaction_type)}},data(){return{isLoading:!1}},methods:{capturePayment(){this.isLoading=!0,this.EmerchantpayGenesisTransaction.doCapture(this.$route.id,this.actionTransaction.unique_id).then(t=>{"success"===t.status&&this.parseResponse(t.response),"error"===t.status&&this.createNotificationError({title:this.$tc("emerchantpay-genesis-transactions.notifications.error-title"),message:this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.capture-failure")+"</br>"+t.message}),this.isLoading=!1,this.closeModal(),this.$emit("executed-capture-event")})},parseResponse(t){t.status===y&&this.createNotificationSuccess({title:this.getSuccessfulResponseTitle(t),message:this.getSuccessfulResponseMessage(t)}),t.status!==y&&this.createNotificationInfo({title:this.getSuccessfulResponseTitle(t),message:this.getSuccessfulResponseMessage(t)})},getSuccessfulResponseTitle(t){let e=this.$tc("emerchantpay-genesis-transactions.notifications.success-title");return t.hasOwnProperty("status")&&t.status===y||(e=this.$tc("emerchantpay-genesis-transactions.notifications.error-title")),e},getSuccessfulResponseMessage(t){let e="";switch(t.status){case y:e=this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.capture-success")+` ${t.amount} ${t.currency}`+"</br>"+(t.message?t.message:"");break;case g:e=this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.capture-decline")+"</br>"+(t.message?t.message:"")}return e},closeModal(){this.$emit("modal-close")}}}),n(282),Shopware.Component.register("emerchantpay-genesis-transaction-action-refund",{template:'<sw-modal variant="small"\n          :title="$tc(\'emerchantpay-genesis-transactions.transaction-actions.refund\')"\n          @modal-close="closeModal">\n\n    <p>{{ modalMessage }}</p>\n\n    <template #modal-footer>\n\n        <sw-button @click="closeModal">\n            {{ $tc(\'emerchantpay-genesis-transactions.transaction-actions.cancel\') }}\n        </sw-button>\n\n        <sw-button variant="primary"\n                   @click="refundPayment">\n            {{ $tc(\'emerchantpay-genesis-transactions.transaction-actions.refund\') }}\n        </sw-button>\n\n    </template>\n\n    <sw-loader v-if="isLoading" size="43px">\n    </sw-loader>\n</sw-modal>\n',inject:["EmerchantpayGenesisTransaction"],mixins:["notification"],props:{actionTransaction:{type:Object,required:!0}},computed:{modalMessage:function(){let t=this.$tc("emerchantpay-genesis-transactions.transaction-actions.descriptions.refund");return(t=(t=t.replace("%amount%",this.actionTransaction.amount)).replace("%currency%",this.actionTransaction.currency)).replace("%transaction_type%",this.actionTransaction.transaction_type)}},data(){return{isLoading:!1}},methods:{refundPayment(){this.isLoading=!0,this.EmerchantpayGenesisTransaction.doRefund(this.$route.id,this.actionTransaction.unique_id).then(t=>{"success"===t.status&&this.parseResponse(t.response),"error"===t.status&&this.createNotificationError({title:this.$tc("emerchantpay-genesis-transactions.notifications.error-title"),message:this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.refund-failure")+"</br>"+t.message}),this.isLoading=!1,this.closeModal(),this.$emit("executed-refund-event")})},parseResponse(t){t.status===y&&this.createNotificationSuccess({title:this.getSuccessfulResponseTitle(t),message:this.getSuccessfulResponseMessage(t)}),t.status!==y&&this.createNotificationInfo({title:this.getSuccessfulResponseTitle(t),message:this.getSuccessfulResponseMessage(t)})},getSuccessfulResponseTitle(t){let e="";switch(t.status){case y:case m:e=this.$tc("emerchantpay-genesis-transactions.notifications.success-title");break;default:e=this.$tc("emerchantpay-genesis-transactions.notifications.error-title")}return e},getSuccessfulResponseMessage(t){let e="";switch(t.status){case m:e=this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.refund-pending")+` ${t.amount} ${t.currency}`+"</br>"+(t.message?t.message:"");break;case y:e=this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.refund-success")+` ${t.amount} ${t.currency}`+"</br>"+(t.message?t.message:"");break;case g:e=this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.refund-decline")+"</br>"+(t.message?t.message:"")}return e},closeModal(){this.$emit("modal-close")}}}),Shopware.Component.register("emerchantpay-genesis-transaction-action-void",{template:'<sw-modal variant="small"\n          :title="$tc(\'emerchantpay-genesis-transactions.transaction-actions.void\')"\n          @modal-close="closeModal">\n\n    <p>{{ modalMessage }}</p>\n\n    <template #modal-footer>\n\n        <sw-button @click="closeModal">\n            {{ $tc(\'emerchantpay-genesis-transactions.transaction-actions.cancel\') }}\n        </sw-button>\n\n        <sw-button variant="primary"\n                   @click="voidPayment">\n            {{ $tc(\'emerchantpay-genesis-transactions.transaction-actions.void\') }}\n        </sw-button>\n\n    </template>\n\n    <sw-loader v-if="isLoading" size="43px">\n    </sw-loader>\n</sw-modal>\n',inject:["EmerchantpayGenesisTransaction"],mixins:["notification"],props:{actionTransaction:{type:Object,required:!0}},data(){return{isLoading:!1}},computed:{modalMessage:function(){let t=this.$tc("emerchantpay-genesis-transactions.transaction-actions.descriptions.void");return(t=(t=t.replace("%amount%",this.actionTransaction.amount)).replace("%currency%",this.actionTransaction.currency)).replace("%transaction_type%",this.actionTransaction.transaction_type)}},methods:{voidPayment(){this.isLoading=!0,this.EmerchantpayGenesisTransaction.doVoid(this.$route.id,this.actionTransaction.unique_id).then(t=>{"success"===t.status&&this.parseResponse(t.response),"error"===t.status&&this.createNotificationError({title:this.$tc("emerchantpay-genesis-transactions.notifications.error-title"),message:this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.void-failure")+"</br>"+t.message}),this.isLoading=!1,this.closeModal(),this.$emit("executed-void-event")})},parseResponse(t){t.status===y&&this.createNotificationSuccess({title:this.getSuccessfulResponseTitle(t),message:this.getSuccessfulResponseMessage(t)}),t.status!==y&&this.createNotificationInfo({title:this.getSuccessfulResponseTitle(t),message:this.getSuccessfulResponseMessage(t)})},getSuccessfulResponseTitle(t){let e=this.$tc("emerchantpay-genesis-transactions.notifications.success-title");return t.hasOwnProperty("status")&&t.status===y||(e=this.$tc("emerchantpay-genesis-transactions.notifications.error-title")),e},getSuccessfulResponseMessage(t){let e="";switch(t.status){case y:e=this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.void-success")+"</br>"+(t.message?t.message:"");break;case g:e=this.$tc("emerchantpay-genesis-transactions.transaction-actions.messages.void-decline")+"</br>"+(t.message?t.message:"")}return e},closeModal(){this.$emit("modal-close")}}}),Shopware.Component.register("emerchantpay-genesis-transaction-actions",{template:'<div>\n    {% block emerchantpay_genesis_transaction_actions_buttons_container %}\n    <sw-card-section secondary slim>\n        <sw-button size="small"\n                   :disabled="!isVoidAvailable"\n                   @click="showModal(\'void\')">\n            {{ $tc(\'emerchantpay-genesis-transactions.header-actions.void\') }}\n        </sw-button>\n        <sw-button size="small"\n                   :disabled="!isCaptureAvailable"\n                   @click="showModal(\'capture\')">\n            {{ $tc(\'emerchantpay-genesis-transactions.header-actions.capture\') }}\n        </sw-button>\n        <sw-button size="small"\n                   :disabled="!isRefundAvailable"\n                   @click="showModal(\'refund\')">\n            {{ $tc(\'emerchantpay-genesis-transactions.header-actions.refund\') }}\n        </sw-button>\n    </sw-card-section>\n\n    <emerchantpay-genesis-transaction-action-refund\n            v-if="modalType === \'refund\'"\n            :actionTransaction="actionTransaction"\n            @modal-close="closeModal"\n            @executed-refund-event="referenceAction">\n    </emerchantpay-genesis-transaction-action-refund>\n    <emerchantpay-genesis-transaction-action-capture\n            v-if="modalType === \'capture\'"\n            :actionTransaction="actionTransaction"\n            @modal-close="closeModal"\n            @executed-capture-event="referenceAction">\n    </emerchantpay-genesis-transaction-action-capture>\n    <emerchantpay-genesis-transaction-action-void\n            v-if="modalType === \'void\'"\n            :actionTransaction="actionTransaction"\n            @modal-close="closeModal"\n            @executed-void-event="referenceAction">\n    </emerchantpay-genesis-transaction-action-void>\n    {% endblock %}\n</div>\n',data(){return{modalType:""}},props:{isVoidAvailable:{type:Boolean,required:!0},isCaptureAvailable:{type:Boolean,required:!0},isRefundAvailable:{type:Boolean,required:!0},actionTransaction:{type:Object,required:!0}},methods:{showModal(t){this.modalType=t},closeModal(){this.modalType=""},referenceAction(){this.$emit("reference-action-event")}}}),Shopware.Module.register("sw-tab-emerchantpay-genesis-transaction-details",{routeMiddleware(t,e){"sw.order.detail"===e.name&&e.children.push({name:"sw.order.emerchantpay-genesis-transaction-details",path:"/sw/order/emerchantpay-genesis-transaction/detail/:id",isChildren:!0,component:"sw-order-emerchantpay-genesis-transaction-details",meta:{parentPath:"sw.order.index"}}),t(e)}})}()})();